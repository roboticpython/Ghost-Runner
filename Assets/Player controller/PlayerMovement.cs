//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player controller/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""floating"",
            ""id"": ""017f0307-92b8-469a-b41b-08cc77111dd3"",
            ""actions"": [
                {
                    ""name"": ""UPandDOWN"",
                    ""type"": ""Button"",
                    ""id"": ""ed8d9b65-c68f-4400-a27f-603317509df9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""54444419-5951-4e40-864c-e925f814166f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UPandDOWN"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""283e6cc2-38ce-4cb1-a67b-abf6663db6c8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UPandDOWN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""900b420c-cb8a-4a9a-8fc8-4445ddb9219c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UPandDOWN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // floating
        m_floating = asset.FindActionMap("floating", throwIfNotFound: true);
        m_floating_UPandDOWN = m_floating.FindAction("UPandDOWN", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // floating
    private readonly InputActionMap m_floating;
    private IFloatingActions m_FloatingActionsCallbackInterface;
    private readonly InputAction m_floating_UPandDOWN;
    public struct FloatingActions
    {
        private @PlayerMovement m_Wrapper;
        public FloatingActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @UPandDOWN => m_Wrapper.m_floating_UPandDOWN;
        public InputActionMap Get() { return m_Wrapper.m_floating; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FloatingActions set) { return set.Get(); }
        public void SetCallbacks(IFloatingActions instance)
        {
            if (m_Wrapper.m_FloatingActionsCallbackInterface != null)
            {
                @UPandDOWN.started -= m_Wrapper.m_FloatingActionsCallbackInterface.OnUPandDOWN;
                @UPandDOWN.performed -= m_Wrapper.m_FloatingActionsCallbackInterface.OnUPandDOWN;
                @UPandDOWN.canceled -= m_Wrapper.m_FloatingActionsCallbackInterface.OnUPandDOWN;
            }
            m_Wrapper.m_FloatingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UPandDOWN.started += instance.OnUPandDOWN;
                @UPandDOWN.performed += instance.OnUPandDOWN;
                @UPandDOWN.canceled += instance.OnUPandDOWN;
            }
        }
    }
    public FloatingActions @floating => new FloatingActions(this);
    public interface IFloatingActions
    {
        void OnUPandDOWN(InputAction.CallbackContext context);
    }
}
